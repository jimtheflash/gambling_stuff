import nba_api.stats.endpoints.playergamelogs as pg
import pandas as pd
import time
season_string = '2020-21'
seas_gamelog = pg.PlayerGameLogs(season_nullable=season_string)
gl_df = seas_gamelog.get_data_frames()
gl_df = gl_df[0]
gl_df['fd'] = gl_df.PTS + (1.2*gl_df.REB) + (1.5*gl_df.AST) + (3*gl_df.BLK) + (3*gl_df.STL) + (-1*gl_df.TOV)
gl_df['dk'] = gl_df.PTS + (0.5*gl_df.FG3M) + (1.25*gl_df.REB) + (1.5*gl_df.AST) + (2*gl_df.BLK) + (2*gl_df.STL) + (-0.5*gl_df.TOV) + (1.5*gl_df.DD2) + (3*gl_df.TD3)
csv_string = './data/nba_gamelogs/nba_gamelogs_' + season_string + '.csv'
gl_df.to_csv(csv_string, index=False)
import nba_api.stats.endpoints.playbyplayv2 as pbp
import pandas as pd
import numpy as np
import time
import os
gamelog_path = './data/nba_gamelogs/'
pbp_path = './data/nba_pbp/'
gamelogs = [f for f in os.listdir(gamelog_path) if not f.startswith('.')]
pbps = [os.path.splitext(x)[0] for x in [y for y in os.listdir(pbp_path) if not y.startswith('.')]]
for gl in gamelogs:
print(gl)
csv_path = gamelog_path + gl
gl_df = pd.read_csv(csv_path, dtype='str')
game_ids = list(gl_df.GAME_ID.unique())
game_ids = list(np.setdiff1d(game_ids, pbps))
if len(game_ids) == 0:
print('No gamelogs to update for this season!')
continue
else:
print('Updating pbp for ' + str(len(game_ids)) + ' games...')
for g in game_ids:
time.sleep(2)
print(g)
playbyplay = pbp.PlayByPlayV2(game_id=str(g), start_period=0, end_period=0)
pbp_df = playbyplay.get_data_frames()
pbp_df = pbp_df[0]
csv_string = pbp_path + g + '.csv'
pbp_df.to_csv(csv_string)
import nba_api.stats.endpoints.scoreboardv2 as sb
import pandas as pd
import numpy as np
import time
import os
test = sb.ScoreboardV2()
test.available
test.available()
dfs = test.get_available_data()
dfs[0]
dfs
dfs = test.get_data_frames()
dfs[0]
View(dfs[0])
import nba_api.stats.endpoints.scoreboard as sb
import nba_api.stats.endpoints.scoreboardv2 as sb2
import pandas as pd
import numpy as np
import time
import os
test = sb.ScoreboardV2()
reticulate::repl_python()
